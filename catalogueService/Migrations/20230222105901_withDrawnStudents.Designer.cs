// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using catalogueService.Database.DBContextFiles;

namespace catalogueService.Migrations
{
    [DbContext(typeof(catalogueDBContext))]
    [Migration("20230222105901_withDrawnStudents")]
    partial class withDrawnStudents
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("catalogueService.Database.DBsets.Course", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("courseTitle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("createdOn")
                        .HasColumnType("datetime2")
                        .HasMaxLength(50);

                    b.Property<int>("programId")
                        .HasColumnType("int");

                    b.HasKey("courseId");

                    b.HasIndex("programId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.Exam", b =>
                {
                    b.Property<int>("examId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("examDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("examName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("invigilator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("passScore")
                        .HasColumnType("int");

                    b.HasKey("examId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.Teacher", b =>
                {
                    b.Property<int>("teacherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("_usersuserId")
                        .HasColumnType("int");

                    b.Property<string>("classSchedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("courseList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("educationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("registrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subjectTaught")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int?>("yearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("teacherID");

                    b.HasIndex("_usersuserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.admin", b =>
                {
                    b.Property<int>("adminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("_usersuserId")
                        .HasColumnType("int");

                    b.Property<string>("accessLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("certifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("departmentalRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hireDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int?>("yearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("adminID");

                    b.HasIndex("_usersuserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.orders", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("delivered")
                        .HasColumnType("datetime2");

                    b.Property<string>("discountID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("orderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("orderID");

                    b.HasIndex("customerId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.sales", b =>
                {
                    b.Property<int>("saleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("customerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datePaid")
                        .HasColumnType("datetime2");

                    b.Property<string>("salesType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("saleId");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.student", b =>
                {
                    b.Property<long>("regNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GPA")
                        .HasColumnType("int");

                    b.Property<int?>("_usersuserId")
                        .HasColumnType("int");

                    b.Property<string>("coursesTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("emailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("enrollmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("graduationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("registrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("regNo");

                    b.HasIndex("_usersuserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.withdrawnStudents", b =>
                {
                    b.Property<long>("regNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GPA")
                        .HasColumnType("int");

                    b.Property<int?>("_usersuserId")
                        .HasColumnType("int");

                    b.Property<string>("coursesTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("emailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("enrollmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("graduationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("registrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("regNo");

                    b.HasIndex("_usersuserId");

                    b.ToTable("withdrawnStudents");
                });

            modelBuilder.Entity("catalogueService.Database.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("FeeId");

                    b.HasIndex("categoryId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("catalogueService.Database.category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("categoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("catalogueService.Database.customer", b =>
                {
                    b.Property<int>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("_usersuserId")
                        .HasColumnType("int");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int")
                        .HasMaxLength(11);

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("customerId");

                    b.HasIndex("_usersuserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("catalogueService.Database.job", b =>
                {
                    b.Property<int>("jobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("jobTitle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("jobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("catalogueService.Database.location", b =>
                {
                    b.Property<int>("locationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("province")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("street")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("locationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("catalogueService.Database.manager", b =>
                {
                    b.Property<int>("managerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("locationId")
                        .HasColumnType("int");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.HasKey("managerId");

                    b.HasIndex("locationId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("catalogueService.Database.type", b =>
                {
                    b.Property<int>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("userType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("typeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("catalogueService.Database.users", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("locationId")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("wallet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.HasIndex("locationId");

                    b.HasIndex("typeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.Course", b =>
                {
                    b.HasOne("catalogueService.Database.Fee", "program")
                        .WithMany()
                        .HasForeignKey("programId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.Teacher", b =>
                {
                    b.HasOne("catalogueService.Database.users", "_users")
                        .WithMany()
                        .HasForeignKey("_usersuserId");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.admin", b =>
                {
                    b.HasOne("catalogueService.Database.users", "_users")
                        .WithMany()
                        .HasForeignKey("_usersuserId");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.orders", b =>
                {
                    b.HasOne("catalogueService.Database.customer", "_customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.student", b =>
                {
                    b.HasOne("catalogueService.Database.users", "_users")
                        .WithMany()
                        .HasForeignKey("_usersuserId");
                });

            modelBuilder.Entity("catalogueService.Database.DBsets.withdrawnStudents", b =>
                {
                    b.HasOne("catalogueService.Database.users", "_users")
                        .WithMany()
                        .HasForeignKey("_usersuserId");
                });

            modelBuilder.Entity("catalogueService.Database.Fee", b =>
                {
                    b.HasOne("catalogueService.Database.category", "_category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("catalogueService.Database.customer", b =>
                {
                    b.HasOne("catalogueService.Database.users", "_users")
                        .WithMany()
                        .HasForeignKey("_usersuserId");
                });

            modelBuilder.Entity("catalogueService.Database.manager", b =>
                {
                    b.HasOne("catalogueService.Database.location", "_location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("catalogueService.Database.users", b =>
                {
                    b.HasOne("catalogueService.Database.location", "_location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("catalogueService.Database.type", "_type")
                        .WithMany()
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
